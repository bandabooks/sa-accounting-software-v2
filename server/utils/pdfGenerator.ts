import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';

interface VatSummaryData {
  period: { startDate: string; endDate: string };
  summary: {
    totalSalesIncVat: string;
    totalSalesExcVat: string;
    totalSalesVat: string;
    totalPurchasesIncVat: string;
    totalPurchasesExcVat: string;
    totalPurchasesVat: string;
    outputVat: string;
    inputVat: string;
    netVatPayable: string;
    netVatRefund: string;
  };
  transactions: {
    invoiceCount: number;
    expenseCount: number;
  };
}

interface VatTransactionData {
  period: { startDate: string; endDate: string };
  transactions: Array<{
    id: number;
    type: string;
    date: string;
    reference: string;
    description: string;
    netAmount: string;
    vatAmount: string;
    grossAmount: string;
    vatRate: number;
  }>;
  summary: {
    totalTransactions: number;
    salesTransactions: number;
    purchaseTransactions: number;
  };
}

export function generateVatSummaryPDF(data: VatSummaryData, companyName: string = 'MY Redeployment'): Buffer {
  const pdf = new jsPDF('portrait', 'mm', 'a4');
  
  // Header
  pdf.setFontSize(20);
  pdf.setTextColor(40, 40, 40);
  pdf.text(companyName, 20, 25);
  
  pdf.setFontSize(16);
  pdf.setTextColor(60, 60, 60);
  pdf.text('VAT Summary Report', 20, 35);
  
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Period: ${data.period.startDate} to ${data.period.endDate}`, 20, 45);
  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 52);
  
  // Line separator
  pdf.setLineWidth(0.5);
  pdf.setDrawColor(200, 200, 200);
  pdf.line(20, 58, 190, 58);
  
  // VAT Summary Table
  const summaryData = [
    ['Sales (Including VAT)', `R ${parseFloat(data.summary.totalSalesIncVat).toFixed(2)}`],
    ['Sales (Excluding VAT)', `R ${parseFloat(data.summary.totalSalesExcVat).toFixed(2)}`],
    ['Output VAT (Sales)', `R ${parseFloat(data.summary.totalSalesVat).toFixed(2)}`],
    ['', ''],
    ['Purchases (Including VAT)', `R ${parseFloat(data.summary.totalPurchasesIncVat).toFixed(2)}`],
    ['Purchases (Excluding VAT)', `R ${parseFloat(data.summary.totalPurchasesExcVat).toFixed(2)}`],
    ['Input VAT (Purchases)', `R ${parseFloat(data.summary.totalPurchasesVat).toFixed(2)}`],
    ['', ''],
    ['Net VAT Payable', `R ${parseFloat(data.summary.netVatPayable).toFixed(2)}`],
    ['Net VAT Refund', `R ${parseFloat(data.summary.netVatRefund).toFixed(2)}`]
  ];

  autoTable(pdf, {
    startY: 65,
    head: [['Description', 'Amount']],
    body: summaryData,
    styles: {
      fontSize: 10,
      cellPadding: 5,
    },
    headStyles: {
      fillColor: [66, 139, 202],
      textColor: 255,
      fontStyle: 'bold',
    },
    alternateRowStyles: {
      fillColor: [245, 245, 245],
    },
    columnStyles: {
      0: { cellWidth: 120 },
      1: { cellWidth: 50, halign: 'right' },
    },
  });

  // Transaction Summary
  const finalY = (pdf as any).lastAutoTable.finalY + 20;
  pdf.setFontSize(14);
  pdf.setTextColor(40, 40, 40);
  pdf.text('Transaction Summary', 20, finalY);
  
  const transactionData = [
    ['Total Invoices', data.transactions.invoiceCount.toString()],
    ['Total Expenses', data.transactions.expenseCount.toString()],
    ['Total Transactions', (data.transactions.invoiceCount + data.transactions.expenseCount).toString()]
  ];

  autoTable(pdf, {
    startY: finalY + 5,
    head: [['Type', 'Count']],
    body: transactionData,
    styles: {
      fontSize: 10,
      cellPadding: 5,
    },
    headStyles: {
      fillColor: [92, 184, 92],
      textColor: 255,
      fontStyle: 'bold',
    },
    alternateRowStyles: {
      fillColor: [245, 245, 245],
    },
    columnStyles: {
      0: { cellWidth: 120 },
      1: { cellWidth: 50, halign: 'right' },
    },
  });

  // Footer
  const pageCount = pdf.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setTextColor(150, 150, 150);
    pdf.text(`Page ${i} of ${pageCount}`, 190, 285, { align: 'right' });
    pdf.text('Generated by Taxnify Business Management Platform', 20, 285);
  }

  return Buffer.from(pdf.output('arraybuffer'));
}

export function generateVatTransactionPDF(data: VatTransactionData, companyName: string = 'MY Redeployment'): Buffer {
  const pdf = new jsPDF('landscape', 'mm', 'a4'); // Landscape for better table view
  
  // Header
  pdf.setFontSize(20);
  pdf.setTextColor(40, 40, 40);
  pdf.text(companyName, 20, 25);
  
  pdf.setFontSize(16);
  pdf.setTextColor(60, 60, 60);
  pdf.text('VAT Transaction Analysis', 20, 35);
  
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Period: ${data.period.startDate} to ${data.period.endDate}`, 20, 45);
  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 52);
  
  // Line separator
  pdf.setLineWidth(0.5);
  pdf.setDrawColor(200, 200, 200);
  pdf.line(20, 58, 277, 58);
  
  // Transactions Table
  const transactionData = data.transactions.map(txn => [
    new Date(txn.date).toLocaleDateString(),
    txn.type,
    txn.reference,
    txn.description.length > 25 ? txn.description.substring(0, 25) + '...' : txn.description,
    `R ${parseFloat(txn.netAmount).toFixed(2)}`,
    `R ${parseFloat(txn.vatAmount).toFixed(2)}`,
    `R ${parseFloat(txn.grossAmount).toFixed(2)}`
  ]);

  autoTable(pdf, {
    startY: 65,
    head: [['Date', 'Type', 'Reference', 'Description', 'Net Amount', 'VAT Amount', 'Gross Amount']],
    body: transactionData.slice(0, 50), // Limit to 50 transactions for PDF
    styles: {
      fontSize: 8,
      cellPadding: 3,
    },
    headStyles: {
      fillColor: [66, 139, 202],
      textColor: 255,
      fontStyle: 'bold',
    },
    alternateRowStyles: {
      fillColor: [245, 245, 245],
    },
    columnStyles: {
      0: { cellWidth: 25 },
      1: { cellWidth: 25 },
      2: { cellWidth: 35 },
      3: { cellWidth: 60 },
      4: { cellWidth: 30, halign: 'right' },
      5: { cellWidth: 30, halign: 'right' },
      6: { cellWidth: 30, halign: 'right' },
    },
  });

  // Summary at the bottom
  const finalY = (pdf as any).lastAutoTable.finalY + 15;
  pdf.setFontSize(12);
  pdf.setTextColor(40, 40, 40);
  pdf.text('Summary:', 20, finalY);
  pdf.text(`Total Transactions: ${data.summary.totalTransactions}`, 20, finalY + 8);
  pdf.text(`Sales Transactions: ${data.summary.salesTransactions}`, 20, finalY + 16);
  pdf.text(`Purchase Transactions: ${data.summary.purchaseTransactions}`, 20, finalY + 24);

  if (data.transactions.length > 50) {
    pdf.text(`Note: Showing first 50 of ${data.transactions.length} transactions`, 20, finalY + 32);
  }

  // Footer
  const pageCount = pdf.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setTextColor(150, 150, 150);
    pdf.text(`Page ${i} of ${pageCount}`, 277, 200, { align: 'right' });
    pdf.text('Generated by Taxnify Business Management Platform', 20, 200);
  }

  return Buffer.from(pdf.output('arraybuffer'));
}

export function generateVatReconciliationPDF(data: any, companyName: string = 'MY Redeployment'): Buffer {
  const pdf = new jsPDF('portrait', 'mm', 'a4');
  
  // Header
  pdf.setFontSize(20);
  pdf.setTextColor(40, 40, 40);
  pdf.text(companyName, 20, 25);
  
  pdf.setFontSize(16);
  pdf.setTextColor(60, 60, 60);
  pdf.text('VAT Reconciliation Report', 20, 35);
  
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Period: ${data.period || 'Current Period'}`, 20, 45);
  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 52);
  
  // Line separator
  pdf.setLineWidth(0.5);
  pdf.setDrawColor(200, 200, 200);
  pdf.line(20, 58, 190, 58);
  
  // Reconciliation Status
  const reconciliationData = [
    ['Status', data.reconciliation?.reportStatus || 'Pending'],
    ['Output VAT', `R ${data.reconciliation?.outputVat || '0.00'}`],
    ['Input VAT', `R ${data.reconciliation?.inputVat || '0.00'}`],
    ['Net VAT', `R ${data.reconciliation?.netVat || '0.00'}`],
    ['Submission Date', data.reconciliation?.submissionDate || 'Not submitted'],
  ];

  autoTable(pdf, {
    startY: 65,
    head: [['Item', 'Value']],
    body: reconciliationData,
    styles: {
      fontSize: 10,
      cellPadding: 5,
    },
    headStyles: {
      fillColor: [149, 117, 205],
      textColor: 255,
      fontStyle: 'bold',
    },
    alternateRowStyles: {
      fillColor: [245, 245, 245],
    },
    columnStyles: {
      0: { cellWidth: 120 },
      1: { cellWidth: 50, halign: 'right' },
    },
  });

  // Footer
  const pageCount = pdf.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setTextColor(150, 150, 150);
    pdf.text(`Page ${i} of ${pageCount}`, 190, 285, { align: 'right' });
    pdf.text('Generated by Taxnify Business Management Platform', 20, 285);
  }

  return Buffer.from(pdf.output('arraybuffer'));
}