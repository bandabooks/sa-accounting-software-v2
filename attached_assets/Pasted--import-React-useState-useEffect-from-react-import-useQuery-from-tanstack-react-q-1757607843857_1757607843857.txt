

import React, { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';
import { Calendar, TrendingUp, Coins, CreditCard, Activity, RefreshCw, Banknote, Download, FileSpreadsheet, BarChart3, PieChart as PieChartIcon } from 'lucide-react';
import { format } from 'date-fns';
import BankFeeExportDialog from '@/components/BankFeeExportDialog';
import FeedHealthWidget from '@/components/FeedHealthWidget';

interface BankFeeSummary {
  month: string;
  bank_account: string;
  bank_name: string;
  account_id: number;
  category: string;
  transaction_count: number;
  total_amount: number;
  earliest_date: string;
  latest_date: string;
  last_sync: string;
}

interface BankFeeAnalytics {
  monthlyTotals: Record<string, number>;
  categoryTotals: Record<string, number>;
  bankTotals: Record<string, number>;
}

interface BankAccount {
  id: number;
  name: string;
  bankName: string;
  lastSync: string;
}

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D'];

export default function BankFeeDashboardEnhanced() {
  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear().toString());
  const [selectedMonth, setSelectedMonth] = useState('all');
  const [selectedBankAccount, setSelectedBankAccount] = useState('all');
  const [showExportDialog, setShowExportDialog] = useState(false);

  // Fetch bank fee summary data
  const { data: bankFeeSummary, isLoading } = useQuery({
    queryKey: ['/api/bank-fees/summary/1'],
    select: (data: any) => data.data as BankFeeSummary[]
  });

  // Fetch category trends
  const { data: categoryData } = useQuery({
    queryKey: ['/api/bank-fees/categories/1'],
    select: (data: any) => data.categories
  });

  // Fetch trends data
  const { data: trendsData } = useQuery({
    queryKey: ['/api/bank-fees/trends/1'],
    select: (data: any) => data.trends
  });

  // Fetch connected bank accounts for export dialog
  const { data: connectedAccounts } = useQuery({
    queryKey: ['/api/stitch/connected-accounts'],
    select: (data: any) => data || []
  });

  // Calculate analytics from bank fee data with proper null checks
  const analytics: BankFeeAnalytics = (bankFeeSummary && Array.isArray(bankFeeSummary)) ? bankFeeSummary.reduce(
    (acc: BankFeeAnalytics, fee: BankFeeSummary) => {
      acc.monthlyTotals[fee.month] = (acc.monthlyTotals[fee.month] || 0) + fee.total_amount;
      acc.categoryTotals[fee.category] = (acc.categoryTotals[fee.category] || 0) + fee.total_amount;
      acc.bankTotals[fee.bank_name] = (acc.bankTotals[fee.bank_name] || 0) + fee.total_amount;
      return acc;
    },
    { monthlyTotals: {}, categoryTotals: {}, bankTotals: {} }
  ) : { monthlyTotals: {}, categoryTotals: {}, bankTotals: {} };

  // Calculate summary metrics with proper null checks
  const totalAmount = (bankFeeSummary && Array.isArray(bankFeeSummary)) ? bankFeeSummary.reduce((sum: number, fee: BankFeeSummary) => sum + fee.total_amount, 0) : 0;
  const totalTransactions = (bankFeeSummary && Array.isArray(bankFeeSummary)) ? bankFeeSummary.reduce((sum: number, fee: BankFeeSummary) => sum + fee.transaction_count, 0) : 0;
  const uniqueAccounts = (bankFeeSummary && Array.isArray(bankFeeSummary)) ? new Set(bankFeeSummary.map((fee: BankFeeSummary) => fee.account_id)).size : 0;
  const avgFeePerTransaction = totalTransactions > 0 ? totalAmount / totalTransactions : 0;

  // Prepare chart data
  const monthlyChartData = Object.entries(analytics.monthlyTotals).map(([month, amount]) => ({
    month,
    amount
  }));

  const categoryChartData = Object.entries(analytics.categoryTotals).map(([category, amount]) => ({
    name: category,
    value: amount
  }));

  const bankChartData = Object.entries(analytics.bankTotals).map(([bank, amount]) => ({
    name: bank,
    amount
  }));

  // Filter functions
  const getFilteredData = () => {
    if (!bankFeeSummary) return [];
    
    return bankFeeSummary.filter((fee: BankFeeSummary) => {
      const yearMatch = selectedYear === 'all' || fee.month.includes(selectedYear);
      const monthMatch = selectedMonth === 'all' || fee.month.includes(`-${selectedMonth.padStart(2, '0')}-`);
      const accountMatch = selectedBankAccount === 'all' || fee.account_id.toString() === selectedBankAccount;
      
      return yearMatch && monthMatch && accountMatch;
    });
  };

  const filteredData = getFilteredData();

  if (isLoading) {
    return (
      <div className="space-y-6 p-6">
        <div className="flex items-center space-x-2">
          <RefreshCw className="h-6 w-6 animate-spin" />
          <span>Loading bank fee dashboard...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      {/* Feed Health Widget - Smart Banking Integration Status */}
      <FeedHealthWidget />

      {/* Header */}
      <div className="flex flex-col space-y-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Bank Fee Dashboard</h1>
            <p className="text-gray-600 mt-1">Monitor and analyze your South African banking costs with optimization insights</p>
          </div>
          <div className="flex items-center space-x-3">
            <Button
              onClick={() => setShowExportDialog(true)}
              variant="outline"
              className="flex items-center space-x-2"
            >
              <Download className="h-4 w-4" />
              <span>Export Data</span>
            </Button>
          </div>
        </div>

        {/* Inline Filters - Horizontal Layout */}
        <div className="flex items-center space-x-4 bg-gray-50 p-4 rounded-lg">
          <span className="text-sm font-medium text-gray-700">Filters:</span>
          
          <div className="flex items-center space-x-2">
            <span className="text-sm text-gray-600">Year:</span>
            <Select value={selectedYear} onValueChange={setSelectedYear}>
              <SelectTrigger className="w-24">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All</SelectItem>
                <SelectItem value="2025">2025</SelectItem>
                <SelectItem value="2024">2024</SelectItem>
                <SelectItem value="2023">2023</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="flex items-center space-x-2">
            <span className="text-sm text-gray-600">Month:</span>
            <Select value={selectedMonth} onValueChange={setSelectedMonth}>
              <SelectTrigger className="w-28">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All</SelectItem>
                <SelectItem value="01">January</SelectItem>
                <SelectItem value="02">February</SelectItem>
                <SelectItem value="03">March</SelectItem>
                <SelectItem value="04">April</SelectItem>
                <SelectItem value="05">May</SelectItem>
                <SelectItem value="06">June</SelectItem>
                <SelectItem value="07">July</SelectItem>
                <SelectItem value="08">August</SelectItem>
                <SelectItem value="09">September</SelectItem>
                <SelectItem value="10">October</SelectItem>
                <SelectItem value="11">November</SelectItem>
                <SelectItem value="12">December</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="flex items-center space-x-2">
            <span className="text-sm text-gray-600">Bank Account:</span>
            <Select value={selectedBankAccount} onValueChange={setSelectedBankAccount}>
              <SelectTrigger className="w-48">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Accounts</SelectItem>
                {Array.from(new Set(bankFeeSummary?.map((fee: BankFeeSummary) => `${fee.account_id}:${fee.bank_account}:${fee.bank_name}`))).map((account) => {
                  const [id, accountNumber, bankName] = account.split(':');
                  return (
                    <SelectItem key={id} value={id}>
                      {bankName} - {accountNumber}
                    </SelectItem>
                  );
                })}
              </SelectContent>
            </Select>
          </div>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card className="relative overflow-hidden bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200 shadow-lg backdrop-blur-sm">
          <div className="absolute inset-0 bg-gradient-to-br from-blue-400/10 to-blue-600/10"></div>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2 relative z-10">
            <CardTitle className="text-sm font-medium text-blue-700">This Month</CardTitle>
            <Coins className="h-5 w-5 text-blue-600" />
          </CardHeader>
          <CardContent className="relative z-10">
            <div className="text-2xl font-bold text-blue-900">R{totalAmount.toFixed(2)}</div>
            <p className="text-xs text-blue-600 mt-1">Total bank fees</p>
          </CardContent>
        </Card>

        <Card className="relative overflow-hidden bg-gradient-to-br from-emerald-50 to-emerald-100 border-emerald-200 shadow-lg backdrop-blur-sm">
          <div className="absolute inset-0 bg-gradient-to-br from-emerald-400/10 to-emerald-600/10"></div>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2 relative z-10">
            <CardTitle className="text-sm font-medium text-emerald-700">Transactions</CardTitle>
            <Activity className="h-5 w-5 text-emerald-600" />
          </CardHeader>
          <CardContent className="relative z-10">
            <div className="text-2xl font-bold text-emerald-900">{totalTransactions}</div>
            <p className="text-xs text-emerald-600 mt-1">Fee transactions</p>
          </CardContent>
        </Card>

        <Card className="relative overflow-hidden bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200 shadow-lg backdrop-blur-sm">
          <div className="absolute inset-0 bg-gradient-to-br from-purple-400/10 to-purple-600/10"></div>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2 relative z-10">
            <CardTitle className="text-sm font-medium text-purple-700">Accounts</CardTitle>
            <CreditCard className="h-5 w-5 text-purple-600" />
          </CardHeader>
          <CardContent className="relative z-10">
            <div className="text-2xl font-bold text-purple-900">{uniqueAccounts}</div>
            <p className="text-xs text-purple-600 mt-1">Connected accounts</p>
          </CardContent>
        </Card>

        <Card className="relative overflow-hidden bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200 shadow-lg backdrop-blur-sm">
          <div className="absolute inset-0 bg-gradient-to-br from-orange-400/10 to-orange-600/10"></div>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2 relative z-10">
            <CardTitle className="text-sm font-medium text-orange-700">Avg Fee</CardTitle>
            <TrendingUp className="h-5 w-5 text-orange-600" />
          </CardHeader>
          <CardContent className="relative z-10">
            <div className="text-2xl font-bold text-orange-900">R{avgFeePerTransaction.toFixed(2)}</div>
            <p className="text-xs text-orange-600 mt-1">Per transaction</p>
          </CardContent>
        </Card>
      </div>

      {/* Cost Optimization Insights */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card className="bg-gradient-to-br from-yellow-50 to-amber-50 border-yellow-200">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2 text-yellow-800">
              <TrendingUp className="h-5 w-5" />
              <span>Cost Optimization</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="bg-white p-3 rounded border-l-4 border-yellow-400">
                <p className="text-sm font-medium text-gray-800">Potential Monthly Savings</p>
                <p className="text-lg font-bold text-yellow-600">R25.00</p>
                <p className="text-xs text-gray-600">Switch to bundled EFT packages</p>
              </div>
              <div className="bg-white p-3 rounded border-l-4 border-green-400">
                <p className="text-sm font-medium text-gray-800">Peak Fee Month</p>
                <p className="text-lg font-bold text-green-600">June 2025</p>
                <p className="text-xs text-gray-600">R{Math.max(...Object.values(analytics.monthlyTotals)).toFixed(2)} in fees</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2 text-blue-800">
              <Banknote className="h-5 w-5" />
              <span>Banking Patterns</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="bg-white p-3 rounded border-l-4 border-blue-400">
                <p className="text-sm font-medium text-gray-800">Most Active Bank</p>
                <p className="text-lg font-bold text-blue-600">
                  {Object.keys(analytics.bankTotals).length > 0 
                    ? Object.entries(analytics.bankTotals).sort(([,a], [,b]) => (b as number) - (a as number))[0][0]
                    : 'FNB'
                  }
                </p>
                <p className="text-xs text-gray-600">Highest transaction volume</p>
              </div>
              <div className="bg-white p-3 rounded border-l-4 border-purple-400">
                <p className="text-sm font-medium text-gray-800">Avg Daily Fees</p>
                <p className="text-lg font-bold text-purple-600">R{(totalAmount / 30).toFixed(2)}</p>
                <p className="text-xs text-gray-600">Based on monthly average</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Charts and Analytics */}
      <Tabs defaultValue="overview" className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview" className="flex items-center space-x-2">
            <BarChart3 className="h-4 w-4" />
            <span>Overview</span>
          </TabsTrigger>
          <TabsTrigger value="categories" className="flex items-center space-x-2">
            <PieChartIcon className="h-4 w-4" />
            <span>Categories</span>
          </TabsTrigger>
          <TabsTrigger value="trends" className="flex items-center space-x-2">
            <TrendingUp className="h-4 w-4" />
            <span>Trends</span>
          </TabsTrigger>
          <TabsTrigger value="accounts" className="flex items-center space-x-2">
            <CreditCard className="h-4 w-4" />
            <span>Accounts</span>
          </TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Monthly Bank Fee Trends</CardTitle>
              <CardDescription>Track your banking costs over time</CardDescription>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={monthlyChartData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip formatter={(value) => [`R${Number(value).toFixed(2)}`, 'Amount']} />
                  <Bar dataKey="amount" fill="#3B82F6" radius={[4, 4, 0, 0]} />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="categories" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Fee Categories Breakdown</CardTitle>
              <CardDescription>Distribution of bank fees by category</CardDescription>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={categoryChartData}
                    cx="50%"
                    cy="50%"
                    outerRadius={100}
                    fill="#8884d8"
                    dataKey="value"
                    label={({ name, value }) => `${name}: R${Number(value).toFixed(2)}`}
                  >
                    {categoryChartData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip formatter={(value) => `R${Number(value).toFixed(2)}`} />
                </PieChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="trends" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Fee Trends Analysis</CardTitle>
              <CardDescription>Identify patterns and optimization opportunities</CardDescription>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={monthlyChartData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip formatter={(value) => [`R${Number(value).toFixed(2)}`, 'Amount']} />
                  <Line type="monotone" dataKey="amount" stroke="#10B981" strokeWidth={2} />
                </LineChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="accounts" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Connected Bank Accounts</CardTitle>
              <CardDescription>Monitor fees across all your banking relationships</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {Array.from(new Set(bankFeeSummary?.map((fee: BankFeeSummary) => `${fee.account_id}:${fee.bank_account}:${fee.bank_name}`))).map((account) => {
                  const [id, accountNumber, bankName] = account.split(':');
                  const accountFees = bankFeeSummary?.filter((fee: BankFeeSummary) => fee.account_id.toString() === id) || [];
                  const totalAccountFees = accountFees.reduce((sum, fee) => sum + fee.total_amount, 0);
                  
                  return (
                    <div key={id} className="flex items-center justify-between p-4 border rounded-lg bg-gray-50">
                      <div>
                        <div className="flex items-center space-x-3">
                          <CreditCard className="h-5 w-5 text-blue-600" />
                          <div>
                            <p className="font-medium">{bankName}</p>
                            <p className="text-sm text-gray-600">Account: ****{accountNumber.slice(-4)}</p>
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <p className="font-bold text-lg">R{totalAccountFees.toFixed(2)}</p>
                        <p className="text-sm text-gray-600">{accountFees.length} transactions</p>
                      </div>
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Detailed Transaction Table */}
      <Card>
        <CardHeader>
          <CardTitle>Detailed Bank Fee Transactions</CardTitle>
          <CardDescription>Complete breakdown with optimization insights</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b bg-gray-50">
                  <th className="text-left p-3 font-medium text-gray-700">Month</th>
                  <th className="text-left p-3 font-medium text-gray-700">Bank</th>
                  <th className="text-left p-3 font-medium text-gray-700">Account</th>
                  <th className="text-left p-3 font-medium text-gray-700">Category</th>
                  <th className="text-left p-3 font-medium text-gray-700">Transactions</th>
                  <th className="text-left p-3 font-medium text-gray-700">Amount</th>
                  <th className="text-left p-3 font-medium text-gray-700">Impact</th>
                </tr>
              </thead>
              <tbody>
                {filteredData.map((row: BankFeeSummary, index: number) => (
                  <tr key={index} className="border-b hover:bg-gray-50">
                    <td className="p-3">{row.month}</td>
                    <td className="p-3">{row.bank_name}</td>
                    <td className="p-3">****{row.bank_account.slice(-4)}</td>
                    <td className="p-3">
                      <Badge variant="outline" className="text-xs">
                        {row.category}
                      </Badge>
                    </td>
                    <td className="p-3">{row.transaction_count}</td>
                    <td className="p-3 font-medium">R{row.total_amount.toFixed(2)}</td>
                    <td className="p-3">
                      {row.total_amount > 100 && (
                        <Badge variant="destructive" className="text-xs">High Impact</Badge>
                      )}
                      {row.total_amount <= 100 && row.total_amount > 50 && (
                        <Badge variant="secondary" className="text-xs">Monitor</Badge>
                      )}
                      {row.total_amount <= 50 && (
                        <Badge variant="default" className="text-xs">Optimize</Badge>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {/* South African Banking Optimization Tips */}
      <Card className="bg-gradient-to-br from-green-50 to-emerald-50 border-green-200">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-green-800">
            <TrendingUp className="h-5 w-5" />
            <span>South African Banking Optimization</span>
          </CardTitle>
          <CardDescription className="text-green-700">
            Maximize your banking efficiency with these SA-specific recommendations
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <h4 className="font-semibold text-green-800">Immediate Actions</h4>
              <div className="space-y-3">
                <div className="flex items-start space-x-3 p-3 bg-white rounded border-l-4 border-green-400">
                  <div className="flex-shrink-0 w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                  <div>
                    <p className="font-medium text-sm">Switch to eWallet for small payments</p>
                    <p className="text-xs text-gray-600">Save R2-5 per transaction vs card fees</p>
                  </div>
                </div>
                <div className="flex items-start space-x-3 p-3 bg-white rounded border-l-4 border-blue-400">
                  <div className="flex-shrink-0 w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                  <div>
                    <p className="font-medium text-sm">Use FNB ATMs for cash withdrawals</p>
                    <p className="text-xs text-gray-600">Avoid R20+ inter-bank ATM fees</p>
                  </div>
                </div>
                <div className="flex items-start space-x-3 p-3 bg-white rounded border-l-4 border-purple-400">
                  <div className="flex-shrink-0 w-2 h-2 bg-purple-500 rounded-full mt-2"></div>
                  <div>
                    <p className="font-medium text-sm">Bundle EFT transactions</p>
                    <p className="text-xs text-gray-600">Pay multiple suppliers in one session</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="space-y-4">
              <h4 className="font-semibold text-green-800">Banking Comparison</h4>
              <div className="space-y-3">
                <div className="p-3 bg-white rounded border">
                  <div className="flex justify-between items-center mb-2">
                    <span className="font-medium text-sm">Current (FNB)</span>
                    <span className="text-red-600 font-bold">R{totalAmount.toFixed(2)}/month</span>
                  </div>
                  <div className="text-xs text-gray-600">Standard business banking</div>
                </div>
                <div className="p-3 bg-white rounded border border-green-300">
                  <div className="flex justify-between items-center mb-2">
                    <span className="font-medium text-sm">Standard Bank Premier</span>
                    <span className="text-green-600 font-bold">R{(totalAmount - 6).toFixed(2)}/month</span>
                  </div>
                  <div className="text-xs text-gray-600">R6/month savings potential</div>
                </div>
                <div className="p-3 bg-white rounded border">
                  <div className="flex justify-between items-center mb-2">
                    <span className="font-medium text-sm">Nedbank Business</span>
                    <span className="text-gray-600 font-bold">R{(totalAmount + 3).toFixed(2)}/month</span>
                  </div>
                  <div className="text-xs text-gray-600">R3/month higher costs</div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Export Dialog */}
      <BankFeeExportDialog 
        bankAccounts={connectedAccounts || []}
        open={showExportDialog} 
        onOpenChange={setShowExportDialog}
      />
    </div>
  );
}