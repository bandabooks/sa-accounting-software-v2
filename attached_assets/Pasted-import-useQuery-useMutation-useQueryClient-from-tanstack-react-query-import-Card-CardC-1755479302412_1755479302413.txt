import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { CreditCard, Users, FileText, Send, CheckCircle, AlertCircle, Clock, TrendingUp, Calculator, Download, RefreshCw, Shield } from "lucide-react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

const emp201SubmissionSchema = z.object({
  payPeriod: z.string().min(1, "Pay period is required"),
  totalEmployees: z.number().min(1, "Must have at least 1 employee"),
  totalPAYE: z.number().min(0, "PAYE amount must be positive"),
  totalUIF: z.number().min(0, "UIF amount must be positive"),
  totalSDL: z.number().min(0, "SDL amount must be positive"),
});

const payeSubmissionSchema = z.object({
  periodStart: z.string().min(1, "Period start date is required"),
  periodEnd: z.string().min(1, "Period end date is required"),
  totalGrossPay: z.number().min(0, "Gross pay must be positive"),
  totalPAYE: z.number().min(0, "PAYE amount must be positive"),
  totalUIF: z.number().min(0, "UIF amount must be positive"),
  totalSDL: z.number().min(0, "SDL amount must be positive"),
});

export default function PayrollSARSIntegration() {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: integrationStatus, isLoading } = useQuery({
    queryKey: ["/api/payroll/sars-integration"],
  });

  const { data: payrollData } = useQuery({
    queryKey: ["/api/payroll/current-period"],
  });

  const { data: submissionHistory } = useQuery({
    queryKey: ["/api/payroll/submission-history"],
  });

  const { data: complianceMetrics } = useQuery({
    queryKey: ["/api/payroll/compliance-metrics"],
  });

  const emp201Form = useForm<z.infer<typeof emp201SubmissionSchema>>({
    resolver: zodResolver(emp201SubmissionSchema),
    defaultValues: {
      payPeriod: "",
      totalEmployees: 0,
      totalPAYE: 0,
      totalUIF: 0,
      totalSDL: 0,
    },
  });

  const payeForm = useForm<z.infer<typeof payeSubmissionSchema>>({
    resolver: zodResolver(payeSubmissionSchema),
    defaultValues: {
      periodStart: "",
      periodEnd: "",
      totalGrossPay: 0,
      totalPAYE: 0,
      totalUIF: 0,
      totalSDL: 0,
    },
  });

  const submitEMP201Mutation = useMutation({
    mutationFn: (data: z.infer<typeof emp201SubmissionSchema>) => 
      apiRequest("POST", "/api/payroll/sars/submit-emp201", data),
    onSuccess: () => {
      toast({ title: "EMP201 Submitted", description: "Monthly submission sent to SARS successfully" });
      queryClient.invalidateQueries({ queryKey: ["/api/payroll/submission-history"] });
      emp201Form.reset();
    }
  });

  const submitPAYEMutation = useMutation({
    mutationFn: (data: z.infer<typeof payeSubmissionSchema>) => 
      apiRequest("POST", "/api/payroll/sars/submit-paye", data),
    onSuccess: () => {
      toast({ title: "PAYE Submitted", description: "PAYE submission sent to SARS successfully" });
      queryClient.invalidateQueries({ queryKey: ["/api/payroll/submission-history"] });
      payeForm.reset();
    }
  });

  const syncPayrollMutation = useMutation({
    mutationFn: () => apiRequest("POST", "/api/payroll/sync-with-sars"),
    onSuccess: () => {
      toast({ title: "Sync Complete", description: "Payroll data synchronized with SARS" });
      queryClient.invalidateQueries({ queryKey: ["/api/payroll/sars-integration"] });
    }
  });

  const calculateTaxesMutation = useMutation({
    mutationFn: () => apiRequest("POST", "/api/payroll/calculate-taxes"),
    onSuccess: () => {
      toast({ title: "Taxes Calculated", description: "All tax calculations updated" });
      queryClient.invalidateQueries({ queryKey: ["/api/payroll/current-period"] });
    }
  });

  const onEMP201Submit = (data: z.infer<typeof emp201SubmissionSchema>) => {
    submitEMP201Mutation.mutate(data);
  };

  const onPAYESubmit = (data: z.infer<typeof payeSubmissionSchema>) => {
    submitPAYEMutation.mutate(data);
  };

  if (isLoading) {
    return (
      <div className="container mx-auto px-6 py-8">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-gray-200 rounded w-1/4"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="h-48 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-6 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Payroll SARS Integration</h1>
        <p className="text-muted-foreground">
          Seamless payroll processing with automated SARS compliance and submissions
        </p>
      </div>

      {/* Status Overview Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">SARS Connection</CardTitle>
            <Shield className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {integrationStatus?.connected ? "Connected" : "Disconnected"}
            </div>
            <Badge variant={integrationStatus?.connected ? "default" : "destructive"}>
              {integrationStatus?.status || "Unknown"}
            </Badge>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Employees</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{payrollData?.totalEmployees || 0}</div>
            <div className="text-xs text-muted-foreground">
              Current payroll period
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total PAYE Due</CardTitle>
            <CreditCard className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">R{payrollData?.totalPAYE?.toLocaleString() || '0'}</div>
            <div className="text-xs text-muted-foreground">
              Due: {payrollData?.payeDueDate || "TBD"}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Compliance Score</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{complianceMetrics?.score || 0}%</div>
            <Progress value={complianceMetrics?.score || 0} className="h-2 mt-2" />
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="overview" className="space-y-6">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="submissions">Submissions</TabsTrigger>
          <TabsTrigger value="calculations">Calculations</TabsTrigger>
          <TabsTrigger value="compliance">Compliance</TabsTrigger>
          <TabsTrigger value="reports">Reports</TabsTrigger>
        </TabsList>

        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Current Payroll Period</CardTitle>
                <CardDescription>Active payroll processing and calculations</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Pay Period</span>
                    <span>{payrollData?.currentPeriod || "2024-12"}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>Total Employees</span>
                    <span>{payrollData?.totalEmployees || 0}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>Gross Pay</span>
                    <span>R{payrollData?.totalGrossPay?.toLocaleString() || '0'}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>PAYE Deducted</span>
                    <span>R{payrollData?.totalPAYE?.toLocaleString() || '0'}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>UIF Deducted</span>
                    <span>R{payrollData?.totalUIF?.toLocaleString() || '0'}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>SDL Deducted</span>
                    <span>R{payrollData?.totalSDL?.toLocaleString() || '0'}</span>
                  </div>
                  <Separator />
                  <div className="flex justify-between text-sm font-medium">
                    <span>Net Pay</span>
                    <span>R{payrollData?.totalNetPay?.toLocaleString() || '0'}</span>
                  </div>
                </div>

                <div className="pt-4 space-y-2">
                  <Button 
                    className="w-full"
                    onClick={() => calculateTaxesMutation.mutate()}
                    disabled={calculateTaxesMutation.isPending}
                  >
                    <Calculator className="h-4 w-4 mr-2" />
                    Recalculate Taxes
                  </Button>
                  <Button 
                    variant="outline"
                    className="w-full"
                    onClick={() => syncPayrollMutation.mutate()}
                    disabled={syncPayrollMutation.isPending}
                  >
                    <RefreshCw className="h-4 w-4 mr-2" />
                    Sync with SARS
                  </Button>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>SARS Integration Status</CardTitle>
                <CardDescription>Real-time connection and sync status</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <div className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <span className="text-sm">SARS Connection</span>
                    </div>
                    <Badge variant="default">Active</Badge>
                  </div>
                  
                  <div className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <span className="text-sm">Tax Tables</span>
                    </div>
                    <Badge variant="default">Updated</Badge>
                  </div>
                  
                  <div className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center gap-2">
                      <Clock className="h-4 w-4 text-yellow-600" />
                      <span className="text-sm">EMP201 Submission</span>
                    </div>
                    <Badge variant="secondary">Due Soon</Badge>
                  </div>
                  
                  <div className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <span className="text-sm">UIF Compliance</span>
                    </div>
                    <Badge variant="default">Current</Badge>
                  </div>
                </div>

                <Separator />

                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Last Sync</span>
                    <span>{integrationStatus?.lastSync || "2024-12-25 09:30"}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>Next Submission</span>
                    <span>{integrationStatus?.nextSubmission || "2025-01-07"}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>Sync Status</span>
                    <Badge variant="default">Up to Date</Badge>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Submissions Tab */}
        <TabsContent value="submissions" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>EMP201 Monthly Submission</CardTitle>
                <CardDescription>Submit monthly employee tax return to SARS</CardDescription>
              </CardHeader>
              <CardContent>
                <Form {...emp201Form}>
                  <form onSubmit={emp201Form.handleSubmit(onEMP201Submit)} className="space-y-4">
                    <FormField
                      control={emp201Form.control}
                      name="payPeriod"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Pay Period</FormLabel>
                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select pay period" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="2024-12">December 2024</SelectItem>
                              <SelectItem value="2024-11">November 2024</SelectItem>
                              <SelectItem value="2024-10">October 2024</SelectItem>
                              <SelectItem value="2024-09">September 2024</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={emp201Form.control}
                      name="totalEmployees"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Total Employees</FormLabel>
                          <FormControl>
                            <Input 
                              {...field} 
                              type="number" 
                              placeholder="0"
                              onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={emp201Form.control}
                      name="totalPAYE"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Total PAYE</FormLabel>
                          <FormControl>
                            <Input 
                              {...field} 
                              type="number" 
                              placeholder="0"
                              onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={emp201Form.control}
                      name="totalUIF"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Total UIF</FormLabel>
                          <FormControl>
                            <Input 
                              {...field} 
                              type="number" 
                              placeholder="0"
                              onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={emp201Form.control}
                      name="totalSDL"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Total SDL</FormLabel>
                          <FormControl>
                            <Input 
                              {...field} 
                              type="number" 
                              placeholder="0"
                              onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <Button 
                      type="submit" 
                      disabled={submitEMP201Mutation.isPending}
                      className="w-full"
                    >
                      <Send className="h-4 w-4 mr-2" />
                      Submit EMP201
                    </Button>
                  </form>
                </Form>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>PAYE Submission</CardTitle>
                <CardDescription>Submit PAYE deductions to SARS</CardDescription>
              </CardHeader>
              <CardContent>
                <Form {...payeForm}>
                  <form onSubmit={payeForm.handleSubmit(onPAYESubmit)} className="space-y-4">
                    <FormField
                      control={payeForm.control}
                      name="periodStart"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Period Start</FormLabel>
                          <FormControl>
                            <Input {...field} type="date" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={payeForm.control}
                      name="periodEnd"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Period End</FormLabel>
                          <FormControl>
                            <Input {...field} type="date" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={payeForm.control}
                      name="totalGrossPay"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Total Gross Pay</FormLabel>
                          <FormControl>
                            <Input 
                              {...field} 
                              type="number" 
                              placeholder="0"
                              onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={payeForm.control}
                      name="totalPAYE"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Total PAYE</FormLabel>
                          <FormControl>
                            <Input 
                              {...field} 
                              type="number" 
                              placeholder="0"
                              onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <Button 
                      type="submit" 
                      disabled={submitPAYEMutation.isPending}
                      className="w-full"
                    >
                      <Send className="h-4 w-4 mr-2" />
                      Submit PAYE
                    </Button>
                  </form>
                </Form>
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>Submission History</CardTitle>
              <CardDescription>Track all SARS submissions and their status</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Date</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Period</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Reference</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {submissionHistory?.map((submission: any, index: number) => (
                    <TableRow key={index}>
                      <TableCell>{submission.date}</TableCell>
                      <TableCell>{submission.type}</TableCell>
                      <TableCell>{submission.period}</TableCell>
                      <TableCell>R{submission.amount.toLocaleString()}</TableCell>
                      <TableCell>
                        <Badge variant={
                          submission.status === "accepted" ? "default" : 
                          submission.status === "pending" ? "secondary" : "destructive"
                        }>
                          {submission.status}
                        </Badge>
                      </TableCell>
                      <TableCell className="font-mono text-xs">{submission.reference}</TableCell>
                    </TableRow>
                  )) || (
                    <TableRow>
                      <TableCell colSpan={6} className="text-center text-muted-foreground py-8">
                        No submissions found
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Calculations Tab */}
        <TabsContent value="calculations" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Tax Calculations</CardTitle>
                <CardDescription>Current period tax calculations and deductions</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="p-4 border rounded-lg">
                    <h4 className="font-medium mb-2">PAYE Calculation</h4>
                    <div className="space-y-1 text-sm">
                      <div className="flex justify-between">
                        <span>Gross Pay</span>
                        <span>R{payrollData?.totalGrossPay?.toLocaleString() || '0'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Tax Rate</span>
                        <span>{payrollData?.averageTaxRate || 0}%</span>
                      </div>
                      <div className="flex justify-between font-medium">
                        <span>PAYE Due</span>
                        <span>R{payrollData?.totalPAYE?.toLocaleString() || '0'}</span>
                      </div>
                    </div>
                  </div>

                  <div className="p-4 border rounded-lg">
                    <h4 className="font-medium mb-2">UIF Calculation</h4>
                    <div className="space-y-1 text-sm">
                      <div className="flex justify-between">
                        <span>Gross Pay</span>
                        <span>R{payrollData?.totalGrossPay?.toLocaleString() || '0'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>UIF Rate</span>
                        <span>1%</span>
                      </div>
                      <div className="flex justify-between font-medium">
                        <span>UIF Due</span>
                        <span>R{payrollData?.totalUIF?.toLocaleString() || '0'}</span>
                      </div>
                    </div>
                  </div>

                  <div className="p-4 border rounded-lg">
                    <h4 className="font-medium mb-2">SDL Calculation</h4>
                    <div className="space-y-1 text-sm">
                      <div className="flex justify-between">
                        <span>Total Payroll</span>
                        <span>R{payrollData?.totalGrossPay?.toLocaleString() || '0'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>SDL Rate</span>
                        <span>1%</span>
                      </div>
                      <div className="flex justify-between font-medium">
                        <span>SDL Due</span>
                        <span>R{payrollData?.totalSDL?.toLocaleString() || '0'}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Employee Breakdown</CardTitle>
                <CardDescription>Individual employee tax calculations</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {payrollData?.employees?.slice(0, 5).map((employee: any, index: number) => (
                    <div key={index} className="p-3 border rounded-lg">
                      <div className="flex justify-between items-start mb-2">
                        <div>
                          <div className="font-medium text-sm">{employee.name}</div>
                          <div className="text-xs text-muted-foreground">{employee.employeeId}</div>
                        </div>
                        <div className="text-right">
                          <div className="text-sm font-medium">R{employee.grossPay.toLocaleString()}</div>
                          <div className="text-xs text-muted-foreground">Gross Pay</div>
                        </div>
                      </div>
                      <div className="grid grid-cols-3 gap-2 text-xs">
                        <div>
                          <div className="text-muted-foreground">PAYE</div>
                          <div>R{employee.paye.toLocaleString()}</div>
                        </div>
                        <div>
                          <div className="text-muted-foreground">UIF</div>
                          <div>R{employee.uif.toLocaleString()}</div>
                        </div>
                        <div>
                          <div className="text-muted-foreground">Net</div>
                          <div>R{employee.netPay.toLocaleString()}</div>
                        </div>
                      </div>
                    </div>
                  )) || (
                    <div className="text-center text-sm text-muted-foreground py-8">
                      No employee data available
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Compliance Tab */}
        <TabsContent value="compliance" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Compliance Dashboard</CardTitle>
              <CardDescription>Monitor payroll compliance and upcoming deadlines</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-medium mb-4">Compliance Metrics</h4>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center gap-2">
                        <CheckCircle className="h-4 w-4 text-green-600" />
                        <span className="text-sm">Tax Calculations</span>
                      </div>
                      <Badge variant="default">Current</Badge>
                    </div>
                    
                    <div className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center gap-2">
                        <CheckCircle className="h-4 w-4 text-green-600" />
                        <span className="text-sm">Employee Records</span>
                      </div>
                      <Badge variant="default">Complete</Badge>
                    </div>
                    
                    <div className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center gap-2">
                        <Clock className="h-4 w-4 text-yellow-600" />
                        <span className="text-sm">Monthly Submissions</span>
                      </div>
                      <Badge variant="secondary">Due Soon</Badge>
                    </div>
                    
                    <div className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center gap-2">
                        <CheckCircle className="h-4 w-4 text-green-600" />
                        <span className="text-sm">UIF Compliance</span>
                      </div>
                      <Badge variant="default">Up to Date</Badge>
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium mb-4">Upcoming Deadlines</h4>
                  <div className="space-y-3">
                    <div className="p-3 border rounded-lg">
                      <div className="flex justify-between items-center mb-1">
                        <span className="text-sm font-medium">EMP201 Submission</span>
                        <Badge variant="destructive">Due in 3 days</Badge>
                      </div>
                      <div className="text-xs text-muted-foreground">
                        Due: 2025-01-07
                      </div>
                    </div>
                    
                    <div className="p-3 border rounded-lg">
                      <div className="flex justify-between items-center mb-1">
                        <span className="text-sm font-medium">PAYE Payment</span>
                        <Badge variant="secondary">Due in 7 days</Badge>
                      </div>
                      <div className="text-xs text-muted-foreground">
                        Due: 2025-01-15
                      </div>
                    </div>
                    
                    <div className="p-3 border rounded-lg">
                      <div className="flex justify-between items-center mb-1">
                        <span className="text-sm font-medium">UIF Returns</span>
                        <Badge variant="outline">Due in 14 days</Badge>
                      </div>
                      <div className="text-xs text-muted-foreground">
                        Due: 2025-01-31
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Reports Tab */}
        <TabsContent value="reports" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Payroll Summary</CardTitle>
                <CardDescription>Complete payroll summary for current period</CardDescription>
              </CardHeader>
              <CardContent>
                <Button className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  Generate Report
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Tax Deductions Report</CardTitle>
                <CardDescription>Detailed tax deductions by employee</CardDescription>
              </CardHeader>
              <CardContent>
                <Button className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  Generate Report
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">SARS Submission Report</CardTitle>
                <CardDescription>History of all SARS submissions</CardDescription>
              </CardHeader>
              <CardContent>
                <Button className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  Generate Report
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Compliance Report</CardTitle>
                <CardDescription>Compliance status and recommendations</CardDescription>
              </CardHeader>
              <CardContent>
                <Button className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  Generate Report
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Employee Tax Certificates</CardTitle>
                <CardDescription>IRP5 certificates for all employees</CardDescription>
              </CardHeader>
              <CardContent>
                <Button className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  Generate Report
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Year-End Returns</CardTitle>
                <CardDescription>Annual payroll and tax returns</CardDescription>
              </CardHeader>
              <CardContent>
                <Button className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  Generate Report
                </Button>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}