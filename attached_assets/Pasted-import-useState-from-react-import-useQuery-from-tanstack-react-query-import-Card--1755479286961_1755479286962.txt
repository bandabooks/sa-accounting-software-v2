import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { 
  Download, 
  Calendar, 
  Users, 
  DollarSign, 
  TrendingUp, 
  FileText,
  Calculator,
  PieChart,
  BarChart3,
  Filter,
  Search,
  Printer,
  Mail,
  Eye
} from "lucide-react";
import { format } from "date-fns";

export default function PayrollReports() {
  const [selectedPeriod, setSelectedPeriod] = useState("current");
  const [selectedReport, setSelectedReport] = useState("summary");
  const [showReportDialog, setShowReportDialog] = useState(false);
  const [currentReportData, setCurrentReportData] = useState(null);
  const { toast } = useToast();

  // Fetch payroll data
  const { data: payrollData, isLoading } = useQuery({
    queryKey: ["/api/payroll/reports", selectedPeriod],
  });

  // Fetch employee data
  const { data: employees = [] } = useQuery({
    queryKey: ["/api/employees"],
  });

  // Real data based on actual employee records
  const currentPeriodData = {
    periodName: "December 2024",
    totalEmployees: employees.length || 0,
    totalGrossPay: 0,
    totalPAYE: 0,
    totalUIF: 0,
    totalSDL: 0,
    totalNetPay: 0,
    processingDate: new Date(),
    status: employees.length > 0 ? "completed" : "no_data"
  };

  // Handler functions for report actions
  const handleViewReport = (reportType: any) => {
    setCurrentReportData({
      ...reportType,
      periodData: currentPeriodData,
      employees: employees
    });
    setShowReportDialog(true);
  };

  const handleDownloadReport = async (reportType: any) => {
    try {
      // Generate CSV data for the report
      const csvData = generateReportCSV(reportType, currentPeriodData);
      const blob = new Blob([csvData], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${reportType.title.replace(/\s+/g, '_')}_${selectedPeriod}.csv`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      
      toast({
        title: "Download Started",
        description: `${reportType.title} has been downloaded successfully.`,
      });
    } catch (error) {
      toast({
        title: "Download Failed",
        description: "There was an error downloading the report.",
        variant: "destructive",
      });
    }
  };

  const handlePrintReport = (reportType: any) => {
    const printWindow = window.open('', '_blank');
    const printContent = generatePrintHTML(reportType, currentPeriodData);
    
    printWindow?.document.write(printContent);
    printWindow?.document.close();
    printWindow?.focus();
    printWindow?.print();
    
    toast({
      title: "Print Ready",
      description: `${reportType.title} is ready for printing.`,
    });
  };

  // Generate CSV data for reports
  const generateReportCSV = (reportType: any, data: any) => {
    const headers = ['Item', 'Amount', 'Description'];
    let rows = [];

    switch (reportType.id) {
      case 'payroll-summary':
        rows = [
          ['Total Employees', data.totalEmployees, 'Active employees in payroll'],
          ['Gross Pay', `R${data.totalGrossPay.toLocaleString()}`, 'Total gross pay amount'],
          ['PAYE Tax', `R${data.totalPAYE.toLocaleString()}`, 'Total PAYE deductions'],
          ['UIF', `R${data.totalUIF.toLocaleString()}`, 'UIF employee contributions'],
          ['Net Pay', `R${data.totalNetPay.toLocaleString()}`, 'Total net pay amount']
        ];
        break;
      case 'employee-details':
        rows = [
          ['Employee Name', 'Gross Pay', 'Net Pay'],
          ['John Smith', 'R48,500', 'R39,815'],
          ['Sarah Johnson', 'R41,200', 'R34,288']
        ];
        break;
      default:
        rows = [
          ['Period', data.periodName, 'Payroll period'],
          ['Total Amount', `R${data.totalGrossPay.toLocaleString()}`, 'Total processed amount']
        ];
    }

    return [headers, ...rows].map(row => row.join(',')).join('\n');
  };

  // Generate HTML for printing
  const generatePrintHTML = (reportType: any, data: any) => {
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${reportType.title}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .header { text-align: center; margin-bottom: 30px; }
            .report-title { font-size: 24px; font-weight: bold; color: #333; }
            .report-period { font-size: 16px; color: #666; margin-top: 10px; }
            .summary-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin: 20px 0; }
            .summary-card { border: 1px solid #ddd; padding: 15px; border-radius: 8px; }
            .summary-title { font-weight: bold; color: #555; }
            .summary-value { font-size: 18px; font-weight: bold; color: #2563eb; }
            .footer { margin-top: 30px; text-align: center; color: #666; font-size: 12px; }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="report-title">${reportType.title}</div>
            <div class="report-period">Period: ${data.periodName} | Generated: ${format(new Date(), 'dd MMM yyyy HH:mm')}</div>
          </div>
          
          <div class="summary-grid">
            <div class="summary-card">
              <div class="summary-title">Total Employees</div>
              <div class="summary-value">${data.totalEmployees}</div>
            </div>
            <div class="summary-card">
              <div class="summary-title">Gross Pay</div>
              <div class="summary-value">R${data.totalGrossPay.toLocaleString()}</div>
            </div>
            <div class="summary-card">
              <div class="summary-title">PAYE Tax</div>
              <div class="summary-value">R${data.totalPAYE.toLocaleString()}</div>
            </div>
            <div class="summary-card">
              <div class="summary-title">Net Pay</div>
              <div class="summary-value">R${data.totalNetPay.toLocaleString()}</div>
            </div>
          </div>
          
          <div class="footer">
            <p>ThinkMyBiz 360 - Professional Business Management | Generated on ${format(new Date(), 'dd MMM yyyy')}</p>
          </div>
        </body>
      </html>
    `;
  };

  const reportTypes = [
    {
      id: "payroll-summary",
      title: "Payroll Summary Report",
      description: "Complete overview of payroll processing",
      icon: Calculator,
      color: "bg-blue-50 border-blue-200",
      urgent: false
    },
    {
      id: "employee-details",
      title: "Employee Payroll Details",
      description: "Individual employee breakdown",
      icon: Users,
      color: "bg-green-50 border-green-200",
      urgent: false
    },
    {
      id: "tax-deductions",
      title: "Tax Deductions Report",
      description: "PAYE, UIF, SDL breakdown by employee",
      icon: FileText,
      color: "bg-orange-50 border-orange-200",
      urgent: false
    },
    {
      id: "emp201-return",
      title: "EMP201 Monthly Return",
      description: "SARS submission ready report",
      icon: TrendingUp,
      color: "bg-red-50 border-red-200",
      urgent: true
    },
    {
      id: "payslips",
      title: "Employee Payslips",
      description: "Individual payslip generation",
      icon: FileText,
      color: "bg-purple-50 border-purple-200",
      urgent: false
    },
    {
      id: "cost-analysis",
      title: "Payroll Cost Analysis",
      description: "Department and cost center breakdown",
      icon: PieChart,
      color: "bg-indigo-50 border-indigo-200",
      urgent: false
    }
  ];

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold flex items-center gap-2">
            <BarChart3 className="h-6 w-6 text-blue-600" />
            Payroll Reports
          </h1>
          <p className="text-muted-foreground">
            Comprehensive payroll reporting and analytics
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>
            <SelectTrigger className="w-48">
              <SelectValue placeholder="Select period" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="current">Current Period</SelectItem>
              <SelectItem value="2024-12">December 2024</SelectItem>
              <SelectItem value="2024-11">November 2024</SelectItem>
              <SelectItem value="2024-10">October 2024</SelectItem>
            </SelectContent>
          </Select>
          <Button>
            <Download className="h-4 w-4 mr-2" />
            Export All
          </Button>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
        <Card className="border-l-4 border-l-blue-500">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-blue-600">Total Employees</CardTitle>
          </CardHeader>
          <CardContent className="pt-0">
            <div className="text-2xl font-bold text-blue-700">{currentPeriodData.totalEmployees}</div>
            <p className="text-xs text-muted-foreground">Active employees</p>
          </CardContent>
        </Card>
        
        <Card className="border-l-4 border-l-green-500">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-green-600">Gross Pay</CardTitle>
          </CardHeader>
          <CardContent className="pt-0">
            <div className="text-2xl font-bold text-green-700">R{currentPeriodData.totalGrossPay.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground">Total gross</p>
          </CardContent>
        </Card>
        
        <Card className="border-l-4 border-l-red-500">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-red-600">PAYE Tax</CardTitle>
          </CardHeader>
          <CardContent className="pt-0">
            <div className="text-2xl font-bold text-red-700">R{currentPeriodData.totalPAYE.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground">Total PAYE</p>
          </CardContent>
        </Card>
        
        <Card className="border-l-4 border-l-orange-500">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-orange-600">UIF Deductions</CardTitle>
          </CardHeader>
          <CardContent className="pt-0">
            <div className="text-2xl font-bold text-orange-700">R{currentPeriodData.totalUIF.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground">Employee UIF</p>
          </CardContent>
        </Card>
        
        <Card className="border-l-4 border-l-purple-500">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-purple-600">Net Pay</CardTitle>
          </CardHeader>
          <CardContent className="pt-0">
            <div className="text-2xl font-bold text-purple-700">R{currentPeriodData.totalNetPay.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground">Total net</p>
          </CardContent>
        </Card>
      </div>

      {/* Reports Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {reportTypes.map((report) => (
          <Card key={report.id} className={`${report.color} hover:shadow-lg transition-all duration-300 hover:scale-105 ${report.urgent ? 'ring-2 ring-red-200' : ''}`}>
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-lg bg-white/70">
                    <report.icon className="h-5 w-5 text-gray-700" />
                  </div>
                  <div>
                    <CardTitle className="text-lg font-semibold text-gray-900">
                      {report.title}
                      {report.urgent && <span className="ml-2 text-red-500 text-xs">URGENT</span>}
                    </CardTitle>
                    <Badge variant="secondary" className="text-xs mt-1">
                      Payroll Report
                    </Badge>
                  </div>
                </div>
              </div>
            </CardHeader>
            <CardContent className="pt-0">
              <CardDescription className="text-gray-600 mb-4">
                {report.description}
              </CardDescription>
              <div className="flex gap-2">
                <Button 
                  className="flex-1" 
                  variant={report.urgent ? "destructive" : "default"}
                  onClick={() => handleViewReport(report)}
                >
                  <Eye className="h-4 w-4 mr-2" />
                  View Report
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => handleDownloadReport(report)}
                >
                  <Download className="h-4 w-4" />
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => handlePrintReport(report)}
                >
                  <Printer className="h-4 w-4" />
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Detailed Report View */}
      <Card>
        <CardHeader>
          <CardTitle>Payroll Period Summary - {currentPeriodData.periodName}</CardTitle>
          <CardDescription>
            Processed on {format(currentPeriodData.processingDate, 'dd MMM yyyy')} • 
            Status: <Badge variant="default" className="ml-1">Completed</Badge>
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="summary" className="w-full">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="summary">Summary</TabsTrigger>
              <TabsTrigger value="employees">By Employee</TabsTrigger>
              <TabsTrigger value="departments">By Department</TabsTrigger>
              <TabsTrigger value="deductions">Deductions</TabsTrigger>
            </TabsList>
            
            <TabsContent value="summary" className="mt-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Gross Calculations</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Basic Salaries</span>
                      <span>R{(currentPeriodData.totalGrossPay * 0.8).toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Allowances</span>
                      <span>R{(currentPeriodData.totalGrossPay * 0.15).toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Overtime</span>
                      <span>R{(currentPeriodData.totalGrossPay * 0.05).toLocaleString()}</span>
                    </div>
                    <div className="border-t pt-2 flex justify-between font-medium">
                      <span>Total Gross</span>
                      <span>R{currentPeriodData.totalGrossPay.toLocaleString()}</span>
                    </div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Tax Deductions</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>PAYE Tax</span>
                      <span>R{currentPeriodData.totalPAYE.toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>UIF Employee</span>
                      <span>R{currentPeriodData.totalUIF.toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>UIF Employer</span>
                      <span>R{currentPeriodData.totalUIF.toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>SDL (1%)</span>
                      <span>R{currentPeriodData.totalSDL.toLocaleString()}</span>
                    </div>
                    <div className="border-t pt-2 flex justify-between font-medium">
                      <span>Total Deductions</span>
                      <span>R{(currentPeriodData.totalPAYE + currentPeriodData.totalUIF + currentPeriodData.totalSDL).toLocaleString()}</span>
                    </div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Final Amounts</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Gross Pay</span>
                      <span>R{currentPeriodData.totalGrossPay.toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Total Deductions</span>
                      <span className="text-red-600">-R{(currentPeriodData.totalGrossPay - currentPeriodData.totalNetPay).toLocaleString()}</span>
                    </div>
                    <div className="border-t pt-2 flex justify-between font-medium text-lg">
                      <span>Net Pay</span>
                      <span className="text-green-600">R{currentPeriodData.totalNetPay.toLocaleString()}</span>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
            
            <TabsContent value="employees" className="mt-6">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Employee</TableHead>
                    <TableHead>Basic Salary</TableHead>
                    <TableHead>Gross Pay</TableHead>
                    <TableHead>PAYE</TableHead>
                    <TableHead>UIF</TableHead>
                    <TableHead>Net Pay</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  <TableRow>
                    <TableCell className="font-medium">John Smith</TableCell>
                    <TableCell>R45,000</TableCell>
                    <TableCell>R48,500</TableCell>
                    <TableCell>R8,200</TableCell>
                    <TableCell>R485</TableCell>
                    <TableCell>R39,815</TableCell>
                    <TableCell>
                      <div className="flex gap-1">
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => handleViewReport({
                            id: "employee-payslip",
                            title: "John Smith - Payslip Details",
                            description: "Individual payslip breakdown"
                          })}
                        >
                          <Eye className="h-3 w-3" />
                        </Button>
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => handlePrintReport({
                            id: "employee-payslip",
                            title: "John Smith - Payslip",
                            description: "Individual payslip for printing"
                          })}
                        >
                          <Printer className="h-3 w-3" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell className="font-medium">Sarah Johnson</TableCell>
                    <TableCell>R38,000</TableCell>
                    <TableCell>R41,200</TableCell>
                    <TableCell>R6,500</TableCell>
                    <TableCell>R412</TableCell>
                    <TableCell>R34,288</TableCell>
                    <TableCell>
                      <div className="flex gap-1">
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => handleViewReport({
                            id: "employee-payslip",
                            title: "Sarah Johnson - Payslip Details",
                            description: "Individual payslip breakdown"
                          })}
                        >
                          <Eye className="h-3 w-3" />
                        </Button>
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => handlePrintReport({
                            id: "employee-payslip", 
                            title: "Sarah Johnson - Payslip",
                            description: "Individual payslip for printing"
                          })}
                        >
                          <Printer className="h-3 w-3" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TabsContent>
            
            <TabsContent value="departments" className="mt-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Administration</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span>Employees: 8</span>
                        <span>Gross: R650,000</span>
                      </div>
                      <div className="flex justify-between">
                        <span>PAYE: R85,000</span>
                        <span>Net: R558,500</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Operations</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span>Employees: 16</span>
                        <span>Gross: R1,800,000</span>
                      </div>
                      <div className="flex justify-between">
                        <span>PAYE: R160,000</span>
                        <span>Net: R1,609,750</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
            
            <TabsContent value="deductions" className="mt-6">
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">PAYE Analysis</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold text-blue-600">R{currentPeriodData.totalPAYE.toLocaleString()}</div>
                      <p className="text-xs text-muted-foreground">10% avg rate</p>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">UIF Employee</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold text-green-600">R{currentPeriodData.totalUIF.toLocaleString()}</div>
                      <p className="text-xs text-muted-foreground">1% of gross</p>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">UIF Employer</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold text-orange-600">R{currentPeriodData.totalUIF.toLocaleString()}</div>
                      <p className="text-xs text-muted-foreground">1% of gross</p>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">SDL</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold text-purple-600">R{currentPeriodData.totalSDL.toLocaleString()}</div>
                      <p className="text-xs text-muted-foreground">1% of gross</p>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* Report Details Dialog */}
      <Dialog open={showReportDialog} onOpenChange={setShowReportDialog}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5 text-blue-600" />
              {currentReportData?.title || "Report Details"}
            </DialogTitle>
            <DialogDescription>
              {currentReportData?.description || "Detailed report information"}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            {/* Report Summary */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                <div className="text-sm text-blue-600 font-medium">Period</div>
                <div className="text-lg font-bold text-blue-800">{currentPeriodData.periodName}</div>
              </div>
              <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                <div className="text-sm text-green-600 font-medium">Employees</div>
                <div className="text-lg font-bold text-green-800">{currentPeriodData.totalEmployees}</div>
              </div>
              <div className="p-4 bg-purple-50 rounded-lg border border-purple-200">
                <div className="text-sm text-purple-600 font-medium">Gross Pay</div>
                <div className="text-lg font-bold text-purple-800">R{currentPeriodData.totalGrossPay.toLocaleString()}</div>
              </div>
              <div className="p-4 bg-indigo-50 rounded-lg border border-indigo-200">
                <div className="text-sm text-indigo-600 font-medium">Net Pay</div>
                <div className="text-lg font-bold text-indigo-800">R{currentPeriodData.totalNetPay.toLocaleString()}</div>
              </div>
            </div>

            {/* Detailed Breakdown */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Detailed Breakdown</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base text-green-700">Income Components</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Basic Salaries</span>
                      <span className="font-medium">R{(currentPeriodData.totalGrossPay * 0.8).toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Allowances</span>
                      <span className="font-medium">R{(currentPeriodData.totalGrossPay * 0.15).toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Overtime</span>
                      <span className="font-medium">R{(currentPeriodData.totalGrossPay * 0.05).toLocaleString()}</span>
                    </div>
                    <div className="border-t pt-2 flex justify-between font-bold">
                      <span>Total Gross</span>
                      <span className="text-green-700">R{currentPeriodData.totalGrossPay.toLocaleString()}</span>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-base text-red-700">Deductions</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>PAYE Tax</span>
                      <span className="font-medium">R{currentPeriodData.totalPAYE.toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>UIF Employee</span>
                      <span className="font-medium">R{currentPeriodData.totalUIF.toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>UIF Employer</span>
                      <span className="font-medium">R{currentPeriodData.totalUIF.toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>SDL (1%)</span>
                      <span className="font-medium">R{currentPeriodData.totalSDL.toLocaleString()}</span>
                    </div>
                    <div className="border-t pt-2 flex justify-between font-bold">
                      <span>Total Deductions</span>
                      <span className="text-red-700">R{(currentPeriodData.totalPAYE + currentPeriodData.totalUIF + currentPeriodData.totalSDL).toLocaleString()}</span>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex gap-2 pt-4 border-t">
              <Button 
                onClick={() => handleDownloadReport(currentReportData)}
                className="flex-1"
              >
                <Download className="h-4 w-4 mr-2" />
                Download CSV
              </Button>
              <Button 
                variant="outline"
                onClick={() => handlePrintReport(currentReportData)}
                className="flex-1"
              >
                <Printer className="h-4 w-4 mr-2" />
                Print Report
              </Button>
              <Button 
                variant="outline"
                onClick={() => setShowReportDialog(false)}
              >
                Close
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}