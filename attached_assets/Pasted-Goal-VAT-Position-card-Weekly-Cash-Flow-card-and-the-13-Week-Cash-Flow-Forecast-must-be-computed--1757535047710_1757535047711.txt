Goal: VAT Position card, Weekly Cash Flow card, and the 13-Week Cash Flow Forecast must be computed from ledger data, respecting dashboard filters (As of date, Period, Accrual/Cash basis) and Refresh.

Scope (no UI changes):

VAT Position (card, status “Payable/Receivable”, due date).

Weekly Cash Flow (card subtitle: “4-week average net flow”).

13-Week Cash Flow Forecast chart (Actual In/Out for past weeks; Forecast In/Out for current+future weeks).

Inputs (typical tables; adjust names to codebase):

invoices(id, issue_date, due_date, total, tax_total, status, customer_id)

bills(id, bill_date, due_date, total, tax_total, status, supplier_id)

payments(id, date, amount, direction[in|out], source[invoice|bill|other], counterparty_id)

bank_transactions(id, date, amount, type[deposit|withdrawal|transfer], category)

org_settings(vat_filing_frequency, vat_due_day default 25, currency, cash_or_accrual_default)

Optional: recurring_expenses, recurring_income

Filters to honor: basis=accrual|cash, asOf, date_from, date_to (Period).

Calculations

1) VAT Position (card)

Accrual basis:
vat_output = SUM(invoices.tax_total WHERE issue_date ∈ period AND status in (approved, sent))
vat_input = SUM(bills.tax_total WHERE bill_date ∈ period AND status in (approved))

Cash basis:
Use payments linked to invoices/bills within period:
vat_output = SUM(payment.amount * invoice.tax_rate/(1+invoice.tax_rate) WHERE direction='in')
vat_input = SUM(payment.amount * bill.tax_rate/(1+bill.tax_rate) WHERE direction='out')

Net: vat_net = vat_output - vat_input
If vat_net > 0 → Payable, else Receivable (display absolute value).

Due date: end-user setting vat_due_day (default 25) of the month following the VAT period end.

Show: R{abs(vat_net)} and badge “Payable/Receivable — Due: {due_date}`.

2) Weekly Cash Flow (card)

Compute the last 4 fully completed ISO weeks ending before asOf.

For each week w:
cash_in_w = SUM(payments.amount WHERE direction='in' AND date ∈ w)
cash_out_w = SUM(payments.amount WHERE direction='out' AND date ∈ w)
Exclude bank transfers (bank_transactions.type='transfer').

Net per week: net_w = cash_in_w - cash_out_w

Card value: avg_4w = ROUND( (Σ net_w over last 4 weeks)/4 ) → display e.g., R1.3k.

3) 13-Week Cash Flow Forecast (chart)

Build 13 weekly buckets from current week (W1) through W13.

Past weeks (fully before asOf):
Actual In/Out from payments (same as above). Set Forecast bars to 0.

Current & future weeks:

Forecast In: open AR where invoice.status in (approved, sent, partial) and expected date = GREATEST(asOf, invoice.due_date) (or due_date + dso_avg if you track DSO).

Forecast Out: open AP where bill.status in (approved, partial) and expected date = GREATEST(asOf, bill.due_date).

Add recurring_expenses/income by their next occurrence date.

Add VAT payment/refund on computed due week: if vat_net>0 include as forecast out, else as forecast in.

Bucket each item by its week start date; sum into Forecast In/Out and keep Actuals as 0 for future weeks.

Tooltip: show Actual In, Actual Out, Forecast In, Forecast Out for the hovered week.

API Contract (proposed)

GET /api/dashboard/metrics?basis=cash&asOf=YYYY-MM-DD&period=current
→ { vat: { amount, direction, dueDate }, weeklyCashFlow: { average4w }, currency: 'ZAR' }

GET /api/dashboard/cashflow-13w?basis=cash&asOf=YYYY-MM-DD
→ [{ week:'W1', actualIn, actualOut, forecastIn, forecastOut }, …, { week:'W13', …}]

Acceptance Criteria

Changing Accrual/Cash or Period/As-of immediately changes card values and the chart after Refresh.

VAT card shows correct direction (Payable/Receivable) and due date derived from settings.

Weekly Cash Flow equals a manual SQL check for the last 4 completed weeks (± rounding).

13-Week chart shows non-zero Forecast bars when there are open AR/AP/recurrings; past weeks show only Actual bars.

Transfers do not affect any cash computations.

All currency displayed in R (ZAR) with thousand separators; no hardcoded numbers remain.

Definition of Done

Unit tests for calculators (VAT, 4-week average, 13-week bucketing).

API schema documented; front-end uses returned JSON only (no client-side hardcoding).

Seeded test data produces non-zero values on cards and forecast.

PR includes screenshots mirroring the dashboard view in the attached examples.