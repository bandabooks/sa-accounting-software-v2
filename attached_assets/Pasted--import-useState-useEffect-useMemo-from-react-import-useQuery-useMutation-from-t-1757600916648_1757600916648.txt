

import { useState, useEffect, useMemo } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useAuth } from "@/hooks/useAuth";
import { useToast } from "@/hooks/use-toast";
import { isUnauthorizedError } from "@/lib/authUtils";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { formatCurrency } from "@/lib/currency";
import { calculateVAT, getVATBreakdown, formatVATRate, formatZAR } from "@/lib/vat-calculations";
import ProductForm from "@/components/ProductForm";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Switch } from "@/components/ui/switch";
import { 
  Plus, 
  Search, 
  Package, 
  Edit,
  Trash2,
  Filter,
  X,
  Info
} from "lucide-react";

export default function Products() {
  const { toast } = useToast();
  const { isAuthenticated, isLoading } = useAuth();
  const [searchTerm, setSearchTerm] = useState("");
  const [filterType, setFilterType] = useState("all");
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState<any>(null);

  // Redirect to login if not authenticated
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      toast({
        title: "Unauthorized",
        description: "You are logged out. Logging in again...",
        variant: "destructive",
      });
      setTimeout(() => {
        window.location.href = "/api/login";
      }, 500);
      return;
    }
  }, [isAuthenticated, isLoading, toast]);

  const { data: products, isLoading: productsLoading } = useQuery({
    queryKey: ["/api/products"],
    retry: false,
  });

  const createProductMutation = useMutation({
    mutationFn: async (productData: any) => {
      return await apiRequest("/api/products", "POST", productData);
    },
    onSuccess: () => {
      toast({
        title: "Success",
        description: "Product created successfully",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/products"] });
      setIsAddDialogOpen(false);
    },
    onError: (error: any) => {
      console.error("Product creation error:", error);
      if (isUnauthorizedError(error)) {
        toast({
          title: "Unauthorized",
          description: "You are logged out. Logging in again...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      toast({
        title: "Error",
        description: error?.message || "Failed to create product",
        variant: "destructive",
      });
    },
  });

  const updateProductMutation = useMutation({
    mutationFn: async ({ id, ...productData }: any) => {
      return await apiRequest(`/api/products/${id}`, "PUT", productData);
    },
    onSuccess: () => {
      toast({
        title: "Success",
        description: "Product updated successfully",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/products"] });
      setEditingProduct(null);
      setIsAddDialogOpen(false);
    },
    onError: (error: any) => {
      console.error("Product update error:", error);
      if (isUnauthorizedError(error)) {
        toast({
          title: "Unauthorized",
          description: "You are logged out. Logging in again...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      toast({
        title: "Error",
        description: error?.message || "Failed to update product",
        variant: "destructive",
      });
    },
  });

  const deleteProductMutation = useMutation({
    mutationFn: async (id: number) => {
      await apiRequest(`/api/products/${id}`, "DELETE");
    },
    onSuccess: () => {
      toast({
        title: "Success",
        description: "Product deleted3 successfully",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/products"] });
    },
    onError: (error) => {
      if (isUnauthorizedError(error as Error)) {
        toast({
          title: "Unauthorized",
          description: "You are logged out. Logging in again...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      toast({
        title: "Error",
        description: "Failed to delete product",
        variant: "destructive",
      });
    },
  });

  const handleEdit = (product: any) => {
    setEditingProduct(product);
    setIsAddDialogOpen(true);
  };

  const handleProductSubmit = (productData: any) => {
    if (editingProduct) {
      updateProductMutation.mutate({ id: editingProduct.id, ...productData });
    } else {
      createProductMutation.mutate(productData);
    }
  };

  const handleCancel = () => {
    setEditingProduct(null);
    setIsAddDialogOpen(false);
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (!isAuthenticated) {
    return null;
  }

  const productsList = Array.isArray(products) ? products : [];
  const filteredProducts = productsList.filter((product: any) => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.description?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = filterType === "all" || product.type === filterType;
    return matchesSearch && matchesFilter;
  });

  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Products & Services</h1>
            <p className="text-gray-600">Manage your inventory and service offerings</p>
          </div>
          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
            <DialogTrigger asChild>
              <Button onClick={() => {
                setEditingProduct(null);
              }}>
                <Plus className="h-4 w-4 mr-2" />
                Add Product/Service
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>
                  {editingProduct ? "Edit Product/Service" : "Add New Product/Service"}
                </DialogTitle>
              </DialogHeader>
              <ProductForm
                product={editingProduct}
                onSubmit={handleProductSubmit}
                onCancel={handleCancel}
                isLoading={createProductMutation.isPending || updateProductMutation.isPending}
              />
            </DialogContent>
          </Dialog>
        </div>
      </header>

      {/* Content */}
      <main className="flex-1 overflow-y-auto p-6">
        <div className="max-w-7xl mx-auto space-y-6">
            {/* Summary Cards - Positioned above search for immediate visibility */}
            <div className="grid grid-cols-1 md:grid-cols-5 gap-6">
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                      <Package className="h-5 w-5 text-blue-600" />
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Total Products</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {Array.isArray(products) ? products.filter((p: any) => p.type === "product").length : 0}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                      <Package className="h-5 w-5 text-green-600" />
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Total Services</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {Array.isArray(products) ? products.filter((p: any) => p.type === "service").length : 0}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-emerald-100 rounded-lg flex items-center justify-center">
                      <Package className="h-5 w-5 text-emerald-600" />
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Avg. Gross Margin</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {(() => {
                          if (!Array.isArray(products)) return "0%";
                          const withCosts = products.filter((p: any) => p.cost && p.price);
                          if (withCosts.length === 0) return "N/A";
                          const avgMargin = withCosts.reduce((sum: number, p: any) => 
                            sum + ((p.price - p.cost) / p.price) * 100, 0) / withCosts.length;
                          return Math.round(avgMargin) + "%";
                        })()}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                      <Package className="h-5 w-5 text-purple-600" />
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Low Stock Items</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {products?.filter((p: any) => p.type === "product" && (p.stockQuantity || 0) < 10).length || 0}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                      <Package className="h-5 w-5 text-purple-600" />
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Avg. Price</p>
                      <p className="text-2xl font-bold text-gray-900">
                        R{products?.length ? Math.round(products.reduce((sum: number, p: any) => sum + Number(p.price), 0) / products.length).toLocaleString() : 0}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Search and Filters */}
            <Card>
              <CardContent className="p-6">
                <div className="flex flex-col sm:flex-row gap-4">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                    <Input
                      placeholder="Search products and services..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                  <div className="flex gap-2">
                    <Button 
                      variant={filterType === "all" ? "default" : "outline"}
                      onClick={() => setFilterType("all")}
                    >
                      All
                    </Button>
                    <Button 
                      variant={filterType === "product" ? "default" : "outline"}
                      onClick={() => setFilterType("product")}
                    >
                      Products
                    </Button>
                    <Button 
                      variant={filterType === "service" ? "default" : "outline"}
                      onClick={() => setFilterType("service")}
                    >
                      Services
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Products Grid */}
            {productsLoading ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {[...Array(6)].map((_, i) => (
                  <Card key={i} className="animate-pulse">
                    <CardContent className="p-6">
                      <div className="h-4 bg-gray-200 rounded mb-4"></div>
                      <div className="h-3 bg-gray-200 rounded mb-2"></div>
                      <div className="h-3 bg-gray-200 rounded mb-4"></div>
                      <div className="h-8 bg-gray-200 rounded"></div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : filteredProducts.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredProducts.map((product: any) => (
                  <Card key={product.id} className="hover:shadow-lg transition-shadow">
                    <CardHeader className="pb-3">
                      <div className="flex items-start justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center">
                            <Package className="h-5 w-5 text-primary" />
                          </div>
                          <div>
                            <CardTitle className="text-lg">{product.name}</CardTitle>
                            <Badge variant={product.type === "product" ? "default" : "secondary"}>
                              {product.type}
                            </Badge>
                          </div>
                        </div>
                        <div className="flex space-x-1">
                          <Button 
                            variant="ghost" 
                            size="sm"
                            onClick={() => handleEdit(product)}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button 
                            variant="ghost" 
                            size="sm"
                            onClick={() => deleteProductMutation.mutate(product.id)}
                          >
                            <Trash2 className="h-4 w-4 text-red-500" />
                          </Button>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        <p className="text-sm text-gray-600 line-clamp-2">
                          {product.description || "No description provided"}
                        </p>
                        {/* SARS-Compliant VAT Display */}
                        {(() => {
                          const vatCalc = product.vatRate !== 'exempt' && product.vatRate !== null 
                            ? calculateVAT(product.price, product.vatRate || 15, product.vatInclusive !== false)
                            : null;
                          
                          return (
                            <div className="space-y-3">
                              <div className="p-3 bg-blue-50 rounded-lg border">
                                <div className="flex items-center justify-between mb-2">
                                  <span className="text-xs font-medium text-blue-900">SARS VAT Information</span>
                                  <Badge variant={product.vatRate === 'exempt' ? 'secondary' : 'default'} className="text-xs">
                                    {product.vatRate === 'exempt' ? 'VAT Exempt' : 
                                     product.vatRate === '0' ? 'Zero Rated' : `${product.vatRate || 15}% VAT`}
                                  </Badge>
                                </div>
                                {vatCalc ? (
                                  <div className="grid grid-cols-3 gap-2 text-xs">
                                    <div className="text-center">
                                      <p className="text-gray-600">Exclusive</p>
                                      <p className="font-semibold text-green-700">{formatZAR(vatCalc.baseAmount)}</p>
                                    </div>
                                    <div className="text-center">
                                      <p className="text-gray-600">VAT</p>
                                      <p className="font-semibold text-blue-700">{formatZAR(vatCalc.vatAmount)}</p>
                                    </div>
                                    <div className="text-center">
                                      <p className="text-gray-600">Inclusive</p>
                                      <p className="font-semibold text-purple-700">{formatZAR(vatCalc.totalAmount)}</p>
                                    </div>
                                  </div>
                                ) : (
                                  <p className="text-xs text-gray-600">Price: {formatZAR(product.price)}</p>
                                )}
                              </div>
                              
                              <div className="grid grid-cols-2 gap-4">
                                {product.cost && (
                                  <div>
                                    <p className="text-sm text-gray-500">Cost Price</p>
                                    <p className="text-lg font-semibold text-gray-600">
                                      {formatZAR(product.cost)}
                                    </p>
                                  </div>
                                )}
                                {product.type === "product" && (
                                  <div>
                                    <p className="text-sm text-gray-500">Stock</p>
                                    <p className="text-lg font-semibold text-gray-900">
                                      {product.stockQuantity || 0}
                                    </p>
                                  </div>
                                )}
                                {product.cost && product.price && (
                                  <div>
                                    <p className="text-sm text-gray-500">Gross Margin</p>
                                    <p className="text-lg font-semibold text-green-600">
                                      {Math.round(((product.price - product.cost) / product.price) * 100)}%
                                    </p>
                                  </div>
                                )}
                              </div>
                            </div>
                          );
                        })()}

                        {/* VAT and Account Info */}
                        <div className="grid grid-cols-2 gap-4 pt-2 border-t">
                          <div>
                            <p className="text-xs text-gray-500">VAT Rate</p>
                            <p className="text-sm font-medium text-gray-700">
                              {product.vatRate === 'exempt' ? 'VAT Exempt' : `${product.vatRate || '15'}%`}
                            </p>
                          </div>
                          {product.incomeAccount && (
                            <div>
                              <p className="text-xs text-gray-500">Income Account</p>
                              <p className="text-sm font-medium text-gray-700">
                                {product.incomeAccount}
                              </p>
                            </div>
                          )}
                        </div>
                        {product.sku && (
                          <div>
                            <p className="text-xs text-gray-500">SKU: {product.sku}</p>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : (
              <Card>
                <CardContent className="p-12 text-center">
                  <Package className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No products or services found</h3>
                  <p className="text-gray-500 mb-6">Get started by adding your first product or service.</p>
                  <Button>
                    <Plus className="h-4 w-4 mr-2" />
                    Add Product/Service
                  </Button>
                </CardContent>
              </Card>
            )}
        </div>
      </main>
    </div>
  );
}