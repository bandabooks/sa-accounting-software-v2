2) UX — Colorful, consistent KPI cards (Receivables/Payables uniform)

Goal: Add clear, accessible colors and icons to differentiate KPIs while staying professional. Use Tailwind; icons from lucide-react.

Component

Create a shared KPIStat component with a variant prop.

// components/KPIStat.tsx
import { Banknote, TrendingUp, TrendingDown, Receipt, FileWarning, PiggyBank } from "lucide-react";

type Variant = "bank" | "revenue" | "profit" | "receivables" | "payables" | "vat";

const STYLES: Record<Variant, {bg: string; ring: string; icon: JSX.Element}> = {
  bank:        { bg: "bg-emerald-50", ring: "ring-emerald-200", icon: <PiggyBank className="w-5 h-5 text-emerald-600" /> },
  revenue:     { bg: "bg-indigo-50",  ring: "ring-indigo-200",  icon: <TrendingUp className="w-5 h-5 text-indigo-600" /> },
  profit:      { bg: "bg-teal-50",    ring: "ring-teal-200",    icon: <Banknote className="w-5 h-5 text-teal-600" /> },
  receivables: { bg: "bg-sky-50",     ring: "ring-sky-200",     icon: <Receipt className="w-5 h-5 text-sky-600" /> },
  payables:    { bg: "bg-amber-50",   ring: "ring-amber-200",   icon: <Receipt className="w-5 h-5 text-amber-600" /> },
  vat:         { bg: "bg-violet-50",  ring: "ring-violet-200",  icon: <FileWarning className="w-5 h-5 text-violet-600" /> },
};

export default function KPIStat({
  variant, title, value, subtitle, negative = false,
}: { variant: Variant; title: string; value: string; subtitle?: string; negative?: boolean }) {
  const s = STYLES[variant];
  return (
    <div className={`${s.bg} ring-1 ${s.ring} rounded-2xl p-4 shadow-sm`}>
      <div className="flex items-center justify-between">
        <span className="text-sm font-medium text-gray-600">{title}</span>
        {s.icon}
      </div>
      <div className={`mt-2 text-2xl font-semibold ${negative ? "text-rose-600" : "text-gray-900"}`}>
        {value}
      </div>
      {subtitle && <div className="mt-1 text-xs text-gray-500">{subtitle}</div>}
    </div>
  );
}

Use it on the dashboard
// Dashboard.tsx (excerpt)
<KPIStat
  variant="bank"
  title="Bank Balance"
  value={formatCurrency(kpis.bankBalance)}
  subtitle={`${(recon.percentMatched*100).toFixed(0)}% reconciled • Last: ${fmtDate(recon.lastReconciledAt)}`}
/>

<KPIStat
  variant="receivables"
  title="Receivables (AR)"
  value={formatCurrency(kpis.ar.total)}
  subtitle={`${formatCurrency(kpis.ar.overdue)} overdue (${percent(kpis.ar.overdue, kpis.ar.total)})`}
/>

<KPIStat
  variant="payables"
  title="Payables (AP)"
  value={formatCurrency(kpis.ap.total)}
  subtitle={`${formatCurrency(kpis.ap.overdue)} overdue`}
/>

<KPIStat
  variant="profit"
  title="Net Profit"
  value={formatCurrency(kpis.netProfit)}
  negative={kpis.netProfit < 0}
  subtitle={`${(kpis.profitMargin*100).toFixed(1)}% margin`}
/>

<KPIStat
  variant="vat"
  title="VAT Position"
  value={formatCurrency(kpis.vat.position)}
  subtitle={`${kpis.vat.status} • Due: ${fmtDate(kpis.vat.dueDate)}`}
/>


Receivables vs Payables uniformity

Same card layout, different palette: AR = Sky, AP = Amber.

Use identical subtitle format for both to improve scanability.

Accessibility

Ensure text contrast ≥ AA (Tailwind palettes above meet contrast with dark text).

Add aria-label on value spans (e.g., aria-label="Bank balance 17,400 Rand").

Acceptance Criteria

Bank Balance on the dashboard equals the Banking Center total for the same companyId and asOf (diff < R0.01).

/api/dashboard computes bank balance from posted GL via the shared getBankBalance() method.

If any diff is detected during rollout, the Bank card shows the “under review” tooltip.

KPI cards render with distinct, accessible colors & icons; Net Profit turns red when negative.

AR/AP cards share identical structure; subtitles show overdue amounts consistently.

No regressions to Accrual/Cash toggle or period filters.

If you want me to also include a quick migration to tag bank accounts (is_bank) or map ac