import { jsPDF } from "jspdf";
import autoTable from 'jspdf-autotable';

interface VatSummaryData {
  period: { startDate: string; endDate: string };
  summary: {
    totalSalesIncVat: string;
    totalSalesExcVat: string;
    totalSalesVat: string;
    totalPurchasesIncVat: string;
    totalPurchasesExcVat: string;
    totalPurchasesVat: string;
    outputVat: string;
    inputVat: string;
    netVatPayable: string;
    netVatRefund: string;
  };
  transactions: {
    invoiceCount: number;
    expenseCount: number;
  };
}

interface VatTransactionData {
  period: { startDate: string; endDate: string };
  transactions: Array<{
    id: number;
    type: string;
    date: string;
    reference: string;
    description: string;
    netAmount: string;
    vatAmount: string;
    grossAmount: string;
    vatRate: number;
  }>;
  summary: {
    totalTransactions: number;
    salesTransactions: number;
    purchaseTransactions: number;
  };
}

export function generateVatSummaryPDF(data: VatSummaryData, companyName: string = 'MY Redeployment'): jsPDF {
  const pdf = new jsPDF('portrait', 'mm', 'a4');
  
  // Header
  pdf.setFontSize(20);
  pdf.setTextColor(40, 40, 40);
  pdf.text(companyName, 20, 25);
  
  pdf.setFontSize(16);
  pdf.setTextColor(60, 60, 60);
  pdf.text('VAT Summary Report', 20, 35);
  
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Period: ${data.period.startDate} to ${data.period.endDate}`, 20, 45);
  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 52);
  
  // Line separator
  pdf.setLineWidth(0.5);
  pdf.setDrawColor(200, 200, 200);
  pdf.line(20, 58, 190, 58);
  
  // VAT Summary Table
  const summaryData = [
    ['Sales (Including VAT)', `R ${parseFloat(data.summary.totalSalesIncVat || '0').toFixed(2)}`],
    ['Sales (Excluding VAT)', `R ${parseFloat(data.summary.totalSalesExcVat || '0').toFixed(2)}`],
    ['Output VAT (Sales)', `R ${parseFloat(data.summary.totalSalesVat || '0').toFixed(2)}`],
    ['', ''],
    ['Purchases (Including VAT)', `R ${parseFloat(data.summary.totalPurchasesIncVat || '0').toFixed(2)}`],
    ['Purchases (Excluding VAT)', `R ${parseFloat(data.summary.totalPurchasesExcVat || '0').toFixed(2)}`],
    ['Input VAT (Purchases)', `R ${parseFloat(data.summary.totalPurchasesVat || '0').toFixed(2)}`],
    ['', ''],
    ['Net VAT Payable', `R ${parseFloat(data.summary.netVatPayable || '0').toFixed(2)}`],
    ['Net VAT Refund', `R ${parseFloat(data.summary.netVatRefund || '0').toFixed(2)}`]
  ];

  autoTable(pdf, {
    startY: 65,
    head: [['Description', 'Amount']],
    body: summaryData,
    styles: {
      fontSize: 10,
      cellPadding: 5,
    },
    headStyles: {
      fillColor: [66, 139, 202],
      textColor: 255,
      fontStyle: 'bold',
    },
    alternateRowStyles: {
      fillColor: [245, 245, 245],
    },
    columnStyles: {
      0: { cellWidth: 120 },
      1: { cellWidth: 50, halign: 'right' },
    },
  });

  // Transaction Summary
  const finalY = (pdf as any).lastAutoTable.finalY + 20;
  pdf.setFontSize(14);
  pdf.setTextColor(40, 40, 40);
  pdf.text('Transaction Summary', 20, finalY);
  
  const transactionData = [
    ['Total Invoices', (data.transactions?.invoiceCount || 0).toString()],
    ['Total Expenses', (data.transactions?.expenseCount || 0).toString()],
    ['Total Transactions', ((data.transactions?.invoiceCount || 0) + (data.transactions?.expenseCount || 0)).toString()]
  ];

  autoTable(pdf, {
    startY: finalY + 5,
    head: [['Type', 'Count']],
    body: transactionData,
    styles: {
      fontSize: 10,
      cellPadding: 5,
    },
    headStyles: {
      fillColor: [92, 184, 92],
      textColor: 255,
      fontStyle: 'bold',
    },
    alternateRowStyles: {
      fillColor: [245, 245, 245],
    },
    columnStyles: {
      0: { cellWidth: 120 },
      1: { cellWidth: 50, halign: 'right' },
    },
  });

  // Footer
  const pageCount = pdf.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setTextColor(150, 150, 150);
    pdf.text(`Page ${i} of ${pageCount}`, 190, 285, { align: 'right' });
    pdf.text('Generated by Taxnify Business Management Platform', 20, 285);
  }

  return pdf;
}

export function generateVatTransactionPDF(data: VatTransactionData, companyName: string = 'MY Redeployment'): jsPDF {
  const pdf = new jsPDF('landscape', 'mm', 'a4'); // Landscape for better table view
  
  // Header
  pdf.setFontSize(20);
  pdf.setTextColor(40, 40, 40);
  pdf.text(companyName, 20, 25);
  
  pdf.setFontSize(16);
  pdf.setTextColor(60, 60, 60);
  pdf.text('VAT Transaction Analysis', 20, 35);
  
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Period: ${data.period.startDate} to ${data.period.endDate}`, 20, 45);
  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 52);
  
  // Line separator
  pdf.setLineWidth(0.5);
  pdf.setDrawColor(200, 200, 200);
  pdf.line(20, 58, 277, 58);
  
  // Transactions Table
  const transactionData = (data.transactions || []).slice(0, 50).map(txn => [
    new Date(txn.date).toLocaleDateString(),
    txn.type,
    txn.reference,
    txn.description.length > 25 ? txn.description.substring(0, 25) + '...' : txn.description,
    `R ${parseFloat(txn.netAmount || '0').toFixed(2)}`,
    `R ${parseFloat(txn.vatAmount || '0').toFixed(2)}`,
    `R ${parseFloat(txn.grossAmount || '0').toFixed(2)}`
  ]);

  if (transactionData.length > 0) {
    autoTable(pdf, {
      startY: 65,
      head: [['Date', 'Type', 'Reference', 'Description', 'Net Amount', 'VAT Amount', 'Gross Amount']],
      body: transactionData,
      styles: {
        fontSize: 8,
        cellPadding: 3,
      },
      headStyles: {
        fillColor: [66, 139, 202],
        textColor: 255,
        fontStyle: 'bold',
      },
      alternateRowStyles: {
        fillColor: [245, 245, 245],
      },
      columnStyles: {
        0: { cellWidth: 25 },
        1: { cellWidth: 25 },
        2: { cellWidth: 35 },
        3: { cellWidth: 60 },
        4: { cellWidth: 30, halign: 'right' },
        5: { cellWidth: 30, halign: 'right' },
        6: { cellWidth: 30, halign: 'right' },
      },
    });
  } else {
    pdf.setFontSize(12);
    pdf.text('No transactions found for the selected period', 20, 75);
  }

  // Summary
  const finalY = transactionData.length > 0 ? (pdf as any).lastAutoTable.finalY + 15 : 90;
  pdf.setFontSize(12);
  pdf.setTextColor(40, 40, 40);
  pdf.text('Summary:', 20, finalY);
  pdf.text(`Total Transactions: ${data.summary?.totalTransactions || 0}`, 20, finalY + 8);
  pdf.text(`Sales Transactions: ${data.summary?.salesTransactions || 0}`, 20, finalY + 16);
  pdf.text(`Purchase Transactions: ${data.summary?.purchaseTransactions || 0}`, 20, finalY + 24);

  // Footer
  const pageCount = pdf.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setTextColor(150, 150, 150);
    pdf.text(`Page ${i} of ${pageCount}`, 277, 200, { align: 'right' });
    pdf.text('Generated by Taxnify Business Management Platform', 20, 200);
  }

  return pdf;
}